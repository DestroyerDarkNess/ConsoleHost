<?xml version="1.0"?>
<doc>
<assembly>
<name>
ConsoleHostDemo
</name>
</assembly>
<members>
<member name="T:ConsoleHostDemo.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ConsoleHostDemo.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ConsoleHostDemo.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs">
 <summary>
 Synthesizes keystrokes, mouse motions, and button clicks.
 </summary>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.BlockInput(System.Boolean)">
 <summary>
 Blocks keyboard and mouse input events from reaching applications.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646290%28v=vs.85%29.aspx
 </summary>
 <param name="fBlockIt">
 The function's purpose. 
 If this parameter is 'TRUE', keyboard and mouse input events are blocked. 
 If this parameter is 'FALSE', keyboard and mouse events are unblocked. 
 </param>
 <returns>
 If the function succeeds, the return value is nonzero.
 If input is already blocked, the return value is zero.
 </returns>
 <remarks>
 Note that only the thread that blocked input can successfully unblock input.
 </remarks>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.SendInput(System.Int32,ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input[],System.Int32)">
 <summary>
 Synthesizes keystrokes, mouse motions, and button clicks.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646310%28v=vs.85%29.aspx
 </summary>
 <param name="nInputs">
 Indicates the number of structures in the pInputs array.
 </param>
 <param name="pInputs">
 Indicates an Array of 'INPUT' structures.
 Each structure represents an event to be inserted into the keyboard or mouse input stream.
 </param>
 <param name="cbSize">
 The size, in bytes, of an 'INPUT' structure.
 If 'cbSize' is not the size of an 'INPUT' structure, the function fails.
 </param>
 <returns>
 The function returns the number of events that it successfully 
 inserted into the keyboard or mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.VirtualKeys">
 <summary>
 VirtualKey codes.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.VirtualKeys.SHIFT">
 <summary>
 The Shift key.
 VK_SHIFT
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.VirtualKeys.DELETE">
 <summary>
 The DEL key.
 VK_DELETE
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.VirtualKeys.RETURN">
 <summary>
 The ENTER key.
 VK_RETURN
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.InputType">
 <summary>
 The type of the input event.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646270%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.InputType.Mouse">
 <summary>
 The event is a mouse event.
 Use the mi structure of the union.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.InputType.Keyboard">
 <summary>
 The event is a keyboard event.
 Use the ki structure of the union.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.InputType.Hardware">
 <summary>
 The event is a hardware event.
 Use the hi structure of the union.
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags">
 <summary>
 Specifies various aspects of a keystroke. 
 This member can be certain combinations of the following values. 
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646271%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags.ExtendedKey">
 <summary>
 If specified, the scan code was preceded by a prefix byte that has the value '0xE0' (224).
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags.KeyDown">
 <summary>
 If specified, the key is being pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags.KeyUp">
 <summary>
 If specified, the key is being released. 
 If not specified, the key is being pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags.ScanCode">
 <summary>
 If specified, 'wScan' identifies the key and 'wVk' is ignored. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput_Flags.Unicode">
 <summary>
 If specified, the system synthesizes a 'VK_PACKET' keystroke. 
 The 'wVk' parameter must be '0'. 
 This flag can only be combined with the 'KEYEVENTF_KEYUP' flag. 
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags">
 <summary>
 A set of bit flags that specify various aspects of mouse motion and button clicks. 
 The bits in this member can be any reasonable combination of the following values. 
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646273%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.Absolute">
 <summary>
 The 'dx' and 'dy' members contain normalized absolute coordinates. 
 If the flag is not set, 'dx' and 'dy' contain relative data 
 (the change in position since the last reported position). 
 This flag can be set, or not set, 
 regardless of what kind of mouse or other pointing device, if any, is connected to the system. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.Move">
 <summary>
 Movement occurred.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.Move_NoCoalesce">
 <summary>
 The 'WM_MOUSEMOVE' messages will not be coalesced. 
 The default behavior is to coalesce 'WM_MOUSEMOVE' messages. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.LeftDown">
 <summary>
 The left button was pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.LeftUp">
 <summary>
 The left button was released.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.RightDown">
 <summary>
 The right button was pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.RightUp">
 <summary>
 The right button was released.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.MiddleDown">
 <summary>
 The middle button was pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.MiddleUp">
 <summary>
 The middle button was released.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.VirtualDesk">
 <summary>
 Maps coordinates to the entire desktop. 
 Must be used in combination with 'Absolute'.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.Wheel">
 <summary>
 The wheel was moved, if the mouse has a wheel. 
 The amount of movement is specified in 'mouseData'. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.HWheel">
 <summary>
 The wheel was moved horizontally, if the mouse has a wheel. 
 The amount of movement is specified in 'mouseData'. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.XDown">
 <summary>
 An X button was pressed.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput_Flags.XUp">
 <summary>
 An X button was released.
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input">
 <summary>
 Used by 'SendInput' function
 to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646270%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input.type">
 <summary>
 The type of the input event.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input.mi">
 <summary>
 The information about a simulated mouse event.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input.ki">
 <summary>
 The information about a simulated keyboard event.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.Input.hi">
 <summary>
 The information about a simulated hardware event.
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput">
 <summary>
 Contains information about a simulated mouse event.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646273%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.dx">
 <summary>
 The absolute position of the mouse, 
 or the amount of motion since the last mouse event was generated, 
 depending on the value of the dwFlags member.
 Absolute data is specified as the 'x' coordinate of the mouse; 
 relative data is specified as the number of pixels moved.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.dy">
 <summary>
 The absolute position of the mouse, 
 or the amount of motion since the last mouse event was generated, 
 depending on the value of the dwFlags member. 
 Absolute data is specified as the 'y' coordinate of the mouse; 
 relative data is specified as the number of pixels moved. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.mouseData">
 <summary>
 If 'dwFlags' contains 'MOUSEEVENTF_WHEEL', 
 then 'mouseData' specifies the amount of wheel movement. 
 A positive value indicates that the wheel was rotated forward, away from the user; 
 a negative value indicates that the wheel was rotated backward, toward the user. 
 One wheel click is defined as 'WHEEL_DELTA', which is '120'.
 
 If 'dwFlags' does not contain 'MOUSEEVENTF_WHEEL', 'MOUSEEVENTF_XDOWN', or 'MOUSEEVENTF_XUP', 
 then mouseData should be '0'. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.dwFlags">
 <summary>
 A set of bit flags that specify various aspects of mouse motion and button clicks. 
 The bits in this member can be any reasonable combination of the following values.
 The bit flags that specify mouse button status are set to indicate changes in status, 
 not ongoing conditions. 
 For example, if the left mouse button is pressed and held down, 
 'MOUSEEVENTF_LEFTDOWN' is set when the left button is first pressed, 
 but not for subsequent motions. 
 Similarly, 'MOUSEEVENTF_LEFTUP' is set only when the button is first released. 
 
 You cannot specify both the 'MOUSEEVENTF_WHEE'L flag 
 and either 'MOUSEEVENTF_XDOWN' or 'MOUSEEVENTF_XUP' flags simultaneously in the 'dwFlags' parameter, 
 because they both require use of the 'mouseData' field. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.time">
 <summary>
 The time stamp for the event, in milliseconds. 
 If this parameter is '0', the system will provide its own time stamp. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.MouseInput.dwExtraInfo">
 <summary>
 An additional value associated with the mouse event. 
 An application calls 'GetMessageExtraInfo' to obtain this extra information. 
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput">
 <summary>
 Contains information about a simulated keyboard event.
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646271%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput.wVk">
 <summary>
 A virtual-key code. 
 The code must be a value in the range '1' to '254'. 
 If the 'dwFlags' member specifies 'KEYEVENTF_UNICODE', wVk must be '0'. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput.wScan">
 <summary>
 A hardware scan code for the key. 
 If 'dwFlags' specifies 'KEYEVENTF_UNICODE', 
 'wScan' specifies a Unicode character which is to be sent to the foreground application. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput.dwFlags">
 <summary>
 Specifies various aspects of a keystroke.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput.time">
 <summary>
 The time stamp for the event, in milliseconds. 
 If this parameter is '0', the system will provide its own time stamp.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.KeyboardInput.dwExtraInfo">
 <summary>
 An additional value associated with the keystroke. 
 Use the 'GetMessageExtraInfo' function to obtain this information. 
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.HardwareInput">
 <summary>
 Contains information about a simulated message generated by an input device other than a keyboard or mouse. 
 For more info see here:
 http://msdn.microsoft.com/en-us/library/windows/desktop/ms646269%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.HardwareInput.uMsg">
 <summary>
 The message generated by the input hardware. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.HardwareInput.wParamL">
 <summary>
 The low-order word of the lParam parameter for uMsg. 
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.NativeMethods.HardwareInput.wParamH">
 <summary>
 The high-order word of the lParam parameter for uMsg. 
 </summary>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton">
 <summary>
 Indicates a mouse button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.LeftDown">
 <summary>
 Hold the left button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.LeftUp">
 <summary>
 Release the left button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.RightDown">
 <summary>
 Hold the right button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.RightUp">
 <summary>
 Release the right button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.MiddleDown">
 <summary>
 Hold the middle button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.MiddleUp">
 <summary>
 Release the middle button.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.LeftPress">
 <summary>
 Press the left button.
 ( Hold + Release )
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.RightPress">
 <summary>
 Press the Right button.
 ( Hold + Release )
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton.MiddlePress">
 <summary>
 Press the Middle button.
 ( Hold + Release )
 </summary>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.SendKey(System.Char,System.Boolean)">
 <summary>
 Sends a keystroke.
 </summary>
 <param name="key">
 Indicates the keystroke to simulate.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the keystroke is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.SendKey(System.Windows.Forms.Keys,System.Boolean)">
 <summary>
 Sends a keystroke.
 </summary>
 <param name="key">
 Indicates the keystroke to simulate.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the keystroke is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.SendKeys(System.String,System.Boolean)">
 <summary>
 Sends a string.
 </summary>
 <param name="String">
 Indicates the string to send.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the keystroke is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the keyboard input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseMove(System.Drawing.Point,System.Boolean)">
 <summary>
 Slices the mouse position.
 </summary>
 <param name="Offset">
 Indicates the offset, in coordinates.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the mouse movement is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseMove(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Slices the mouse position.
 </summary>
 <param name="X">
 Indicates the 'X' offset.
 </param>
 <param name="Y">
 Indicates the 'Y' offset.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the mouse movement is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.MousePosition(System.Drawing.Point,System.Boolean)">
 <summary>
 Moves the mouse hotspot to an absolute position, in coordinates.
 </summary>
 <param name="Position">
 Indicates the absolute position.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the mouse movement is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.MousePosition(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Moves the mouse hotspot to an absolute position, in coordinates.
 </summary>
 <param name="X">
 Indicates the absolute 'X' coordinate.
 </param>
 <param name="Y">
 Indicates the absolute 'Y' coordinate.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the mouse movement is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SendInputs.MouseClick(ConsoleHostDemo.Win32.Helpers.SendInputs.MouseButton,System.Boolean)">
 <summary>
 Simulates a mouse click.
 </summary>
 <param name="MouseAction">
 Indicates the mouse action to perform.
 </param>
 <param name="BlockInput">
 If set to <c>true</c>, the keyboard and mouse are blocked until the mouse movement is sent.
 </param>
 <returns>
 The function returns the number of events that it successfully inserted into the mouse input stream. 
 If the function returns zero, the input was already blocked by another thread.
 </returns>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.NativeMethods">
 <summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/>  must not be applied to this class.
 This class is for methods that can be used anywhere because a stack walk will be performed.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/ms182161.aspx
 </summary>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.NativeMethods.FindWindow(System.String,System.String)">
 <summary>
 Retrieves a handle to the top-level window whose class name and window name match the specified strings.
 This function does not search child windows.
 This function does not perform a case-sensitive search.
 To search child windows, beginning with a specified child window, use the FindWindowEx function.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633499%28v=vs.85%29.aspx
 </summary>
 <param name="lpClassName">The class name.
 If this parameter is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
 <param name="lpWindowName">The window name (the window's title).
 If this parameter is NULL, all window names match.</param>
 <returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
 If the function fails, the return value is NULL.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
 <summary>
 Retrieves a handle to a window whose class name and window name match the specified strings. 
 The function searches child windows, beginning with the one following the specified child window. 
 This function does not perform a case-sensitive search.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633500%28v=vs.85%29.aspx
 </summary>
 <param name="hwndParent">
 A handle to the parent window whose child windows are to be searched.
 If hwndParent is NULL, the function uses the desktop window as the parent window. 
 The function searches among windows that are child windows of the desktop. 
 </param>
 <param name="hwndChildAfter">
 A handle to a child window. 
 The search begins with the next child window in the Z order. 
 The child window must be a direct child window of hwndParent, not just a descendant window.
 If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
 </param>
 <param name="strClassName">
 The window class name.
 </param>
 <param name="strWindowName">
 The window name (the window's title). 
 If this parameter is NULL, all window names match.
 </param>
 <returns>
 If the function succeeds, the return value is a handle to the window that has the specified class and window names.
 If the function fails, the return value is NULL.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
 <summary>
 Retrieves the identifier of the thread that created the specified window 
 and, optionally, the identifier of the process that created the window.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633522%28v=vs.85%29.aspx
 </summary>
 <param name="hWnd">A handle to the window.</param>
 <param name="ProcessId">
 A pointer to a variable that receives the process identifier. 
 If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; 
 otherwise, it does not.
 </param>
 <returns>The identifier of the thread that created the window.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.SetWindowStyle(System.IntPtr,ConsoleHostDemo.Win32.Helpers.SetWindowStyle.WindowStyles)">
 <summary>
 Set the state of a window by an HWND.
 </summary>
 <param name="WindowHandle">A handle to the window.</param>
 <param name="WindowStyle">The Style of the window.</param>
 <returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowStyle.SetWindowStyle(System.String,ConsoleHostDemo.Win32.Helpers.SetWindowStyle.WindowStyles,System.Boolean)">
 <summary>
 Set the state of a window by a process name.
 </summary>
 <param name="ProcessName">The name of the process.</param>
 <param name="WindowStyle">The Style of the window.</param>
 <param name="Recursivity">If set to <c>false</c>, only the first process instance will be processed.</param>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SetWindowState.NativeMethods">
 <summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/>  must not be applied to this class.
 This class is for methods that can be used anywhere because a stack walk will be performed.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/ms182161.aspx
 </summary>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.NativeMethods.FindWindow(System.String,System.String)">
 <summary>
 Retrieves a handle to the top-level window whose class name and window name match the specified strings.
 This function does not search child windows.
 This function does not perform a case-sensitive search.
 To search child windows, beginning with a specified child window, use the FindWindowEx function.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633499%28v=vs.85%29.aspx
 </summary>
 <param name="lpClassName">The class name.
 If this parameter is NULL, it finds any window whose title matches the lpWindowName parameter.</param>
 <param name="lpWindowName">The window name (the window's title).
 If this parameter is NULL, all window names match.</param>
 <returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
 If the function fails, the return value is NULL.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
 <summary>
 Retrieves a handle to a window whose class name and window name match the specified strings. 
 The function searches child windows, beginning with the one following the specified child window. 
 This function does not perform a case-sensitive search.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633500%28v=vs.85%29.aspx
 </summary>
 <param name="hwndParent">
 A handle to the parent window whose child windows are to be searched.
 If hwndParent is NULL, the function uses the desktop window as the parent window. 
 The function searches among windows that are child windows of the desktop. 
 </param>
 <param name="hwndChildAfter">
 A handle to a child window. 
 The search begins with the next child window in the Z order. 
 The child window must be a direct child window of hwndParent, not just a descendant window.
 If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
 </param>
 <param name="strClassName">
 The window class name.
 </param>
 <param name="strWindowName">
 The window name (the window's title). 
 If this parameter is NULL, all window names match.
 </param>
 <returns>
 If the function succeeds, the return value is a handle to the window that has the specified class and window names.
 If the function fails, the return value is NULL.
 </returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
 <summary>
 Retrieves the identifier of the thread that created the specified window 
 and, optionally, the identifier of the process that created the window.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633522%28v=vs.85%29.aspx
 </summary>
 <param name="hWnd">A handle to the window.</param>
 <param name="ProcessId">
 A pointer to a variable that receives the process identifier. 
 If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; 
 otherwise, it does not.
 </param>
 <returns>The identifier of the thread that created the window.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.NativeMethods.ShowWindow(System.IntPtr,ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState)">
 <summary>
 Sets the specified window's show state.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx
 </summary>
 <param name="hwnd">A handle to the window.</param>
 <param name="nCmdShow">Controls how the window is to be shown.</param>
 <returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member>
<member name="T:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState">
 <summary>
 Controls how the window is to be shown.
 MSDN Documentation: http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Hide">
 <summary>
 Hides the window and activates another window.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Normal">
 <summary>
 Activates and displays a window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when displaying the window for the first time.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowMinimized">
 <summary>
 Activates the window and displays it as a minimized window.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Maximize">
 <summary>
 Maximizes the specified window.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowMaximized">
 <summary>
 Activates the window and displays it as a maximized window.
 </summary>      
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowNoActivate">
 <summary>
 Displays a window in its most recent size and position. 
 This value is similar to <see cref="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Normal"/>, except the window is not actived.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Show">
 <summary>
 Activates the window and displays it in its current size and position.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Minimize">
 <summary>
 Minimizes the specified window and activates the next top-level window in the Z order.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowMinNoActive">
 <summary>
 Displays the window as a minimized window. 
 This value is similar to <see cref="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowMinimized"/>, except the window is not activated.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowNA">
 <summary>
 Displays the window in its current size and position.
 This value is similar to <see cref="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Show"/>, except the window is not activated.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.Restore">
 <summary>
 Activates and displays the window. 
 If the window is minimized or maximized, the system restores it to its original size and position.
 An application should specify this flag when restoring a minimized window.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ShowDefault">
 <summary>
 Sets the show state based on the SW_* value specified in the STARTUPINFO structure 
 passed to the CreateProcess function by the program that started the application.
 </summary>
</member>
<member name="F:ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState.ForceMinimize">
 <summary>
 <b>Windows 2000/XP:</b> 
 Minimizes a window, even if the thread that owns the window is not responding. 
 This flag should only be used when minimizing windows from a different thread.
 </summary>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.SetWindowState(System.IntPtr,ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState)">
 <summary>
 Set the state of a window by an HWND.
 </summary>
 <param name="WindowHandle">A handle to the window.</param>
 <param name="WindowState">The state of the window.</param>
 <returns><c>true</c> if the function succeeds, <c>false</c> otherwise.</returns>
</member>
<member name="M:ConsoleHostDemo.Win32.Helpers.SetWindowState.SetWindowState(System.String,ConsoleHostDemo.Win32.Helpers.SetWindowState.WindowState,System.Boolean)">
 <summary>
 Set the state of a window by a process name.
 </summary>
 <param name="ProcessName">The name of the process.</param>
 <param name="WindowState">The state of the window.</param>
 <param name="Recursivity">If set to <c>false</c>, only the first process instance will be processed.</param>
</member>
</members>
</doc>
